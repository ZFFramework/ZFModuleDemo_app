apply plugin: 'com.android.application'

def ZF_ROOT_PATH = this.projectDir.getAbsolutePath() + '/../../../../../../ZFFramework'
android {
    compileSdkVersion 24
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 24
        versionCode 1
        versionName '1.0'
        externalNativeBuild {
            cmake {
                cppFlags ''
            }
        }
        ndk {
            // abiFilters 'arm64-v8a', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'x86', 'x86_64'
            abiFilters 'armeabi-v7a'
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path 'CMakeLists.txt'
        }
    }
}

repositories {
    flatDir {
        dirs 'libs' \
            , ZF_ROOT_PATH + '/_release/Android/module/ZFCore/aar' \
            , ZF_ROOT_PATH + '/_release/Android/module/ZFAlgorithm/aar' \
            , ZF_ROOT_PATH + '/_release/Android/module/ZFUtility/aar' \
            , ZF_ROOT_PATH + '/_release/Android/module/ZFUIKit/aar' \
            , ZF_ROOT_PATH + '/_release/Android/module/ZFUIWidget/aar' \
            , ZF_ROOT_PATH + '/_release/Android/module/ZFModuleDemo_lib/aar' \
            , ZF_ROOT_PATH + '/_release/Android/module/ZF_impl/aar' \
            , ZF_ROOT_PATH + '/_release/Android/module/ZFCore_impl/aar' \
            , ZF_ROOT_PATH + '/_release/Android/module/ZFAlgorithm_impl/aar' \
            , ZF_ROOT_PATH + '/_release/Android/module/ZFUIKit_impl/aar'
    }
}
dependencies {
    implementation fileTree(dir: 'libs', includes: ['*.jar'])
    implementation (name: 'ZFCore', ext: 'aar')
    implementation (name: 'ZFAlgorithm', ext: 'aar')
    implementation (name: 'ZFUtility', ext: 'aar')
    implementation (name: 'ZFUIKit', ext: 'aar')
    implementation (name: 'ZFUIWidget', ext: 'aar')
    implementation (name: 'ZFModuleDemo_lib', ext: 'aar')
    implementation (name: 'ZF_impl', ext: 'aar')
    implementation (name: 'ZFCore_impl', ext: 'aar')
    implementation (name: 'ZFAlgorithm_impl', ext: 'aar')
    implementation (name: 'ZFUIKit_impl', ext: 'aar')
}

import org.apache.tools.ant.taskdefs.condition.Os

task ZFSetup {
    doLast {
        if(Os.isFamily(Os.FAMILY_WINDOWS)) {
            exec {
                executable 'cmd.exe'
                args '/c', this.projectDir.getAbsolutePath() + '/../../../../../zfsetup.bat'
            }
            exec {
                executable 'cmd.exe'
                args '/c', ZF_ROOT_PATH + '/tools/release/release_Android.bat', 1
            }
            exec {
                executable 'cmd.exe'
                args '/c', ZF_ROOT_PATH + '/tools/util/copy_res.bat', this.projectDir.getAbsolutePath() + '/../../../../zfres', this.projectDir.getAbsolutePath() + '/src/main/assets/zfres'
            }
        }
        else {
            exec {
                executable 'sh'
                args this.projectDir.getAbsolutePath() + '/../../../../../zfsetup.sh'
            }
            exec {
                executable 'sh'
                args ZF_ROOT_PATH + '/tools/release/release_Android.sh', 1
            }
            exec {
                executable 'sh'
                args ZF_ROOT_PATH + '/tools/util/copy_res.sh', this.projectDir.getAbsolutePath() + '/../../../../zfres', this.projectDir.getAbsolutePath() + '/src/main/assets/zfres'
            }
        }
    }
}
preBuild.dependsOn ZFSetup

